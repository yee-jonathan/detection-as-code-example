# Apply Terraform configuration to dev environment and test detections.

name: Test & Deploy in Dev

on:
  # Trigger the workflow on pull requests
  pull_request:
    branches: [ "*" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # Validate Terraform configuration and check for formatting issues
  validate-terraform-configuration:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    
    steps:
      - uses: actions/checkout@v3
      
      # Install Terraform CLI
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.2

      - name: Prepare Terraform working directory
        run: terraform init

      - name: Validate Terraform configuration
        run: terraform validate

      - name: Validate Terraform formatting
        run: terraform fmt -recursive -check

  # Trigger detection rules in dev environment
  trigger-detections-in-dev:
    needs: deploy-to-dev
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v3
      
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Trigger Detection Rules in Dev
        run: python -m detections_cli --run-all-triggers
        env:
          LOGGING_LEVEL: ${{ vars.LOGGING_LEVEL }}
          OKTA_DEV_URL: ${{ vars.OKTA_DEV_URL }}
          OKTA_DEV_API_TOKEN: ${{ secrets.OKTA_DEV_API_TOKEN }}
          TEST_OKTA_USER_FIRST_NAME: ${{ vars.TEST_OKTA_USER_FIRST_NAME }}
          TEST_OKTA_USER_LAST_NAME: ${{ vars.TEST_OKTA_USER_LAST_NAME }}
          TEST_OKTA_USER_EMAIL: ${{ vars.TEST_OKTA_USER_EMAIL }}
          TEST_OKTA_USER_PASSWORD: ${{ secrets.TEST_OKTA_USER_PASSWORD }}

    # Validate that alerts were generated after detection rules were triggered
  check-for-alerts:
    needs: trigger-detections-in-dev
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v3

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait 10m for Alerts Creation
        run: sleep 10m
    
      - name: Validate Alert Creation in Dev
        run: python -m detections_cli --validate-alerts
        env:
          LOGGING_LEVEL: ${{ vars.LOGGING_LEVEL }}

          OKTA_DEV_URL: ${{ vars.OKTA_DEV_URL }}
          OKTA_DEV_API_TOKEN: ${{ secrets.OKTA_DEV_API_TOKEN }}
          TEST_OKTA_USER_FIRST_NAME: ${{ vars.TEST_OKTA_USER_FIRST_NAME }}
          TEST_OKTA_USER_LAST_NAME: ${{ vars.TEST_OKTA_USER_LAST_NAME }}
          TEST_OKTA_USER_EMAIL: ${{ vars.TEST_OKTA_USER_EMAIL }}
          TEST_OKTA_USER_PASSWORD: ${{ secrets.TEST_OKTA_USER_PASSWORD }}

          GITHUB_DAC_REPO_API_URL: ${{ vars.GH_DAC_REPO_API_URL }}
          GITHUB_DAC_REPO_API_TOKEN: ${{ secrets.GH_DAC_REPO_API_TOKEN }}

